{"version":3,"sources":["components/Card.js","components/Wrapper.js","components/Container.js","App.js","serviceWorker.js","index.js"],"names":["arr","logError","error","console","log","$","css","opacity","text","fetchJSON","ajax","headers","Accept","url","success","jsonQuotes","quotesData","JSON","parse","quotes","filter","quote","length","push","apply","Object","toConsumableArray","catch","Card","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","copyText","bind","assertThisInitialized","handleClick","tweet","currentQuote","randomQuote","Math","floor","random","currentAuthor","author","animate","html","document","getElementById","disabled","setTimeout","$temp","append","val","select","execCommand","remove","window","self","top","e","inIframe","encodeURIComponent","open","react_default","a","createElement","className","id","class","index_es","icon","faClipboard","onClick","faTwitterSquare","React","Component","Wrapper","components_Card","Container","components_Wrapper","App","components_Container","Boolean","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7a4a320a.chunk.js","sourcesContent":["import React from 'react'\nimport $ from 'jquery'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faClipboard  } from '@fortawesome/free-solid-svg-icons'\nimport { faTwitterSquare } from '@fortawesome/free-brands-svg-icons'\n\n\nvar arr = []; //to store response from URL\n\n\n//HELPER FUNCTIONS____________________________________________________________\n\n\nfunction getQuotes() {\n  return $.ajax({\n    headers: {\n      Accept: \"application/json\"\n    },\n    url: 'https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json',\n    success: function(jsonQuotes) {\n      if (typeof jsonQuotes === 'string') {\n        var quotesData = JSON.parse(jsonQuotes).quotes;\n        quotesData = quotesData.filter((quote) => quote.quote.length <= 200);\n        console.log(quotesData);\n        arr.push(...quotesData);\n      }\n    }\n  });\n}\n\nfunction logError(error) {\n  console.log('Looks like there was a problem:', error);\n  $('#subs, #Q, #new-quote').css({opacity: 0});\n  var errorMsg = 'Oops! Looks like there was a problem. Please reload the page and try again.';\n  $('#text').text(errorMsg);\n}\n\n\nfunction fetchJSON() {\n   getQuotes()\n    .catch(logError);\n}\n//___________________________________---------------------------------------------------\n\nfunction openURL(url){\n  window.open(url, 'Share', 'width=550, height=400, toolbar=0, scrollbars=1 ,location=0 ,statusbar=0,menubar=0, resizable=0');\n}\n\nfunction inIframe () { try { return window.self !== window.top; } catch (e) { return true; } }\n\n\nclass Card extends React.Component{\n   constructor(props){\n     super(props);\n     this.copyText = this.copyText.bind(this);\n     this.handleClick = this.handleClick.bind(this);\n     this.tweet = this.tweet.bind(this);\n     this.currentQuote = \"Too many of us are not living our dreams because we are living our fears.\";\n  }\n\n  componentDidMount(){\n     fetchJSON();\n  }\n\n  handleClick(){\n      var  randomQuote = arr[Math.floor(Math.random() * arr.length)];\n      var  currentQuote = randomQuote.quote;\n      var  currentAuthor = randomQuote.author;\n      this.currentQuote = currentQuote;\n     $(\"#text, #author, #copy-quote, .card-wrapper\").animate(\n      { opacity: 0 },\n      2000,\n      function() {\n           $(this).animate({ opacity: 1}, 2000);\n           $('#text').text(currentQuote);\n           $('#author').html(currentAuthor);\n\n      }\n    );\n     document.getElementById('new-quote').disabled =  true;\n\n    //reenable the button after animation------------------------------\n    setTimeout(function() {\n        document.getElementById('new-quote').disabled =  false;\n      }, 4000);\n\n  }\n\n  //copy Quote-------------------------------------\n  copyText(){\n     var copyText = document.getElementById(\"text\");\n     var $temp = $(\"<input>\");\n     $(\"body\").append($temp);\n     $temp.val($(copyText).text()).select(); //copy the quote and append to input , then select the text\n     document.execCommand(\"copy\");//copy the selected text\n     $temp.remove();\n    $('.tooltiptext').css({opacity: 1}); //display copied tooltip text\n\n    //hide tooltip after 1s\n    setTimeout(function() {\n        $('.tooltiptext').css('opacity', 0);\n      }, 1000);\n   }\n\n\n tweet(){\n   if(!inIframe()) {\n      openURL('https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text=' + encodeURIComponent('\"' + this.currentQuote + '\"'));\n    }\n }\n\n\n\n  render(){\n    return (\n      <div className=\"card\">\n        <div id='Q'>Q</div>\n        <div id=\"text\">Too many of us are not living our dreams because we are living our fears.\n          </div>\n          <span class=\"tooltiptext\">Copied!</span>\n         <div id='subs'>\n            <div id='icons'>\n            <FontAwesomeIcon id=\"copy-quote\" icon={faClipboard} onClick={this.copyText} />\n            <FontAwesomeIcon id='tweet-quote' icon={faTwitterSquare} onClick={this.tweet}/>\n          </div>\n           <div id='author'>Les Brown</div>\n        </div>\n        <button id=\"new-quote\" onClick={this.handleClick}>New  Quote</button>\n      </div>\n    )\n  }\n}\n\n\nexport default Card;\n","import React from 'react'\nimport Card from './Card'\n\nclass Wrapper extends React.Component{\n  render(){\n    return (\n      <div className=\"card-wrapper\">\n        <Card />\n      </div>\n    )\n  }\n}\n\n\nexport default Wrapper;\n","import React from 'react'\nimport Wrapper from './Wrapper'\n\nclass Container extends React.Component{\n  render() {\n    return(\n        <div  id=\"container\">\n           <Wrapper id=\"quote-box\" />\n        </div>\n    )\n  }\n}\nexport default Container;\n","import React, { Component } from 'react';\nimport './App.scss';\nimport Container from './components/Container'\n\n\nclass App extends Component {\n  render() {\n    return (\n      <Container />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'babel-polyfill';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}